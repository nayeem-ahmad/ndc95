rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to get user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() in ['admin', 'superAdmin'];
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'superAdmin';
    }
    
    // Helper function to check if user is group admin
    function isGroupAdmin() {
      return isAuthenticated() && getUserRole() in ['groupAdmin', 'admin', 'superAdmin'];
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can create their own user document during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can update their own data (except role)
      // Admins can update anyone's data
      allow update: if (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) 
                    || isAdmin();
      
      // Only super admins can delete users
      allow delete: if isSuperAdmin();
    }
    
    // Verification Codes collection
    match /verificationCodes/{email} {
      // Only Cloud Functions can write verification codes
      allow write: if false;
      
      // Users can read their own verification code (for dev mode button)
      // In production, you might want to disable this entirely
      allow read: if isAuthenticated() && request.auth.token.email.lower() == email;
    }
    
    // Posts/Announcements collection (if you add this feature)
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if isAuthenticated();
      
      // Only admins and group admins can create/update posts
      allow create, update: if isGroupAdmin();
      
      // Only admins can delete posts
      allow delete: if isAdmin();
    }
    
    // Messages/Chat collection (if you add this feature)
    match /messages/{messageId} {
      // Anyone authenticated can read messages
      allow read: if isAuthenticated();
      
      // Anyone authenticated can send messages
      allow create: if isAuthenticated();
      
      // Only message sender or admins can update/delete
      allow update, delete: if isOwner(resource.data.senderId) || isAdmin();
    }
    
    // Groups collection (if you add this feature)
    match /groups/{groupId} {
      // Anyone authenticated can read groups
      allow read: if isAuthenticated();
      
      // Only group admins and admins can create/update groups
      allow create, update: if isGroupAdmin();
      
      // Only admins can delete groups
      allow delete: if isAdmin();
    }
    
    // Events collection (if you add this feature)
    match /events/{eventId} {
      // Anyone authenticated can read events
      allow read: if isAuthenticated();
      
      // Only group admins and admins can create/update events
      allow create, update: if isGroupAdmin();
      
      // Only admins can delete events
      allow delete: if isAdmin();
    }
    
    // Default rule: deny all access not explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
